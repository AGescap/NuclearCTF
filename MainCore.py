import numpy as np
import sys

'''
This Python script is aimed at processing an input file of CTF core simulation code, which has been generated by CTF preprocessor [1]. 
The input of this script will be a Core input file -i.e. more than one Fuel Assembly- The output of this file will be a  new CTF input file where previous subchannels
have been merged into larger ones. This code is not much pythonic, but that makes it easier to be read by a Matlab user. Many of the instructions assume
that there are no empty lines in the begginning of a Card, whereas most of them are ok with blank lines at the end of a Card.


 
Author: Álvaro González Escapa
Institution: Polytechnic University of Madrid
Python version: 3.8 


References:
[1]. Avramova, Maria N. and Salko, Robert (2016). CTF preprocessor's user manual. Pennsylvania State University. Reactor dynamics and fuel management group

'''


def findcardinline(doc, string, time=1):
    # so as to count the iterations. Caution is needed with the string here, because if one types
    # e.g. Card 3.3., it will find both Card 3.3 or Card 3.3.5.
    # With the variable time, it can now look for the n-th time that the Card appears (like in axial or radial profiles)
    cont = 0
    locus = -1
    clock = 1
    for linex in doc:

        # find returns the first position of the sequence that appears in the line. Should it not appear,
        # find returns -1. The exact value does not matter, only its presence

        if linex.find(string) >= 0:
            if clock < time:
                clock = clock + 1
                cont = cont + 1
            else:
                locus = cont
                break
        else:
            cont = cont + 1
    return locus


def findheaderinline(doc, string, time=1, separator=" "):
    cont = 0
    locus = -1
    clock = 1
    for linex in doc:
        if linex.replace(separator, "").find(string.replace(separator, "")) >= 0:
            if clock < time:
                clock = clock+1
                cont = cont + 1
            else:
                locus = cont
                break
        else:
            cont = cont + 1
    return locus


def findnextto(doc, string1, string2, time1=1, time2=1):
    start = int(findheaderinline(doc, string1, time=time1))
    aux_doc = [None]*(len(doc) - start)
    for i in range(0, len(doc) - start):
        aux_doc[i] = doc[i+start]

    finish = findheaderinline(aux_doc, string2, time=time2) + start
    return finish


# removeexcesslines takes a list of strings (the result of readlines method), sets an origin
# (ideally, a variables header) and from that, counts PRIOR lines -like the ones in Group 4 of deck.inp in CTF-
# in the new situation, ACTUAL lines must be conserved, from the position BEGIN, and thus REMOVE lines must be erased


def removeexcesslines(doc, begin, prior, actual):
    remove = prior - actual
    for i in range(0, remove):
        doc.pop(begin+actual+1)


def rewritesomelines(doc, begin, piece):
    # rewrites all the lines in piece. First one replaced is the next one to "begin"
    for i in range(0, len(piece)):
        doc[begin+1+i] = piece[i] + " \n"


# deletebetweencards looks for the position number time 1 of the Card 1 and deletes everything
# (including Card1) until it finds Card 2 (for the time2-th occasion)
def deletebetweencards(doc, card1, card2, time1=1, time2=1):
    pos1 = findcardinline(doc, card1, time1)
    pos2 = findcardinline(doc, card2, time2)
    for i in range(0, pos2 - pos1):
        doc.pop(pos1)


def chanindex_xy(x, y, numchannelside):
    # chanindex: from the x, y position (origin in bottom left corner), gets the index of the channel.
    # Numeration begins at top left and goes first rightwards and then downwards.
    # System of reference: x increases to the right, y increases from the bottom to the top
    return x+(numchannelside - y)*numchannelside


def retrieve_xy(index, numchannelside):
    # retrieve_xy: from the index and the number of channels per side, gets x and y (origin in bottom left corner). This
    # does not apply exclusively for subchannel, but for any homogenization
    y = numchannelside - (index - 1) // numchannelside
    x = index - (numchannelside - y)*numchannelside
    return [x, y]


def refchannel(numchannel, dlevel, n_sbchn_side):
    # f rom the number of a newly created channel (1,2,...N/Dlev**2), gets global index of its top left channel
    new_chn_per_side = n_sbchn_side / dlevel
    [x, y] = retrieve_xy(numchannel, new_chn_per_side)
    return 1 + (x-1) * dlevel + (new_chn_per_side - y) * n_sbchn_side * dlevel


def format_e(n):    # This function allows to write a float as a string with scientific notation
    a = '%E' % n
    return a.split('E')[0].rstrip('0').rstrip('.') + 'E' + a.split('E')[1]


def main():
    '''
    Here the approach is that of deducting all the subchannel properties from prepro data, given that some features as
    the guide tubes location are more explicitly given in those files, rather than in deck.inp (the coordinates appear,
    whereas in deck.inp a search should be done in the radial power profile)
    '''
    # open the deck file and also the prepro files
    file = open("deck.inp", "r")
    lines = file.readlines()
    file.close()

    file_control = open("control.inp", "r")
    l_control = file_control.readlines()
    file_control.close()

    file_geo = open("geo.inp", "r")
    l_geo = file_geo.readlines()
    file_geo.close()

    file_assem = open("assem.inp", "r")
    l_assem = file_assem.readlines()
    file_assem.close()

    file_power = open("power.inp", "r")
    l_power = file_power.readlines()
    file_power.close()

    '''
    Begin the READS and simple Calculations, not DELETES nor WRITES yet
    '''

    # gets number of fuel assemblies in assem.inp
    fa_num = int(l_geo[findheaderinline(l_geo, "*Number of fuel assemblies")+1].split()[0])
    fa_types = int(l_geo[findheaderinline(l_geo, "NUMBER OF FUEL ASSEMBLY TYPES") + 1].split()[0])
    fa_numcol = int(l_geo[findheaderinline(l_geo, "CORE MESH X Y")+1].split()[0])
    fa_numrow = int(l_geo[findheaderinline(l_geo, "CORE MESH X Y")+1].split()[1])

    # gets rods number in the assembly

    nfrods = int(l_assem[findheaderinline(l_assem, "Number of fuel rods")+1].split()[0])

    # gets number of guidetubes

    ngt = int(l_assem[findheaderinline(l_assem, "Number of guide tubes/water rods") + 1].split()[0])

    # total number of rods, rods per side, channels per side, discretization level

    nrods = nfrods + ngt
    nrods_side = int(np.sqrt(nrods))
    nchn_side = nrods_side + 1
    nchn = nchn_side**2
    dlev = 2

    if nchn_side % dlev != 0:
        print("ERROR: The original number of channels per side is not divisible by dlev: " + str(dlev) + "\n")
        sys.exit(1)

    # new number of channels in the new, homogenized bundle

    newchn = int(nchn/(dlev**2))

    # gets bundle pitch and converts it into m

    bp = float(l_assem[findheaderinline(l_assem, "Bundle pitch") + 1].split()[0])
    bp = bp / 1000

    # gets pin pitch and converts it into mm

    pp = float(l_assem[findheaderinline(l_assem, "Pin pitch") + 1].split()[0])
    pp = pp / 1000

    # gets position of guide tubes if there are any. with the origin in top left corner of the FA,
    # the "0th" position marks the row and "1st" position, the column

    fr_od = float(l_assem[findheaderinline(l_assem, "Cladding outer diameter") + 1].split()[0])
    fr_od = fr_od/1000

    gtpos = np.zeros((ngt, 2), dtype=int)
    rodtype = np.zeros(nrods, dtype=int)
    auxvar = int(0)

    if ngt > 0:

        for i in range(ngt):
            linaux = l_assem[findheaderinline(l_assem, "Use X Y format") + 1+i].split()
            gtpos[i][0] = int(linaux[0])
            gtpos[i][1] = int(linaux[1])
            auxvar = nrods_side*(gtpos[i][0]-1) + gtpos[i][1] - 1
            rodtype[auxvar] = 1

        gt_od = float(l_assem[findheaderinline(l_assem, "Outer diameter of guide tube/water rod") + 1].split()[0])
        gt_od = gt_od/1000

    # stores the fuel assembly map

    core_map = np.zeros((fa_numrow, fa_numcol), dtype=int)
    for i in range(fa_numrow):
        linaux = (l_geo[findheaderinline(l_geo, "FUEL ASSEMBLY MAP") + 2+i].split())
        for j in range(fa_numcol):
            core_map[i][j] = float(linaux[j+1])

    # creates absolute coordinates for the center of the different FAs. They are created for both empty-water-
    # FAs so that it has to be filtered afterwards. The reference is set in top left corner so that
    # first coordinate refers to rows and second coordinate refers to columns

    core_cent = np.zeros((fa_numrow, fa_numcol, 2), dtype=float)

    for i in range(fa_numcol):
        for j in range(fa_numrow):
            core_cent[j][i][0] = ((i+1) - 0.5 - float(fa_numcol)/2)*bp
            core_cent[j][i][1] = (float(fa_numrow)/2 + 0.5 - (j+1))*bp


    # this matrix will only contain the center of the FAs

    fa_cent = np.zeros((fa_num, 2), dtype=float)

    # stores the fuel assembly map
    # fa_transl contains an ordered list of the positions in the core array that have an actual FA
    fa_transl = np.zeros(fa_num, dtype=int)
    fa_types = np.zeros(fa_num, dtype=int)

    # core map has the core map, with the positions and the indexes

    core_map = np.zeros((fa_numrow, fa_numcol), dtype=int)
    cont_a = 1
    cont_b = 0

    # edit fa_transl, edit core_map

    for i in range(fa_numrow):
        linaux = (l_geo[findheaderinline(l_geo, "FUEL ASSEMBLY MAP") + 2+i].split())
        for j in range(fa_numcol):
            if int(linaux[j+1]) != 0:
                fa_transl[cont_b] = cont_a
                fa_types[cont_b] = int(linaux[j+1])
                fa_cent[cont_b] = core_cent[i][j]
                cont_b = cont_b + 1

            core_map[i][j] = int(linaux[j+1])
            cont_a = cont_a + 1

    # local parameters in a FA
    free_sp = (bp - (nrods_side-1)*pp)/2

    # now, for every FA type, generic info about channels (An, Pw, XSIZ, YSIZ) should be created
    # gaps data demands more complexity

    # creates an array

    od_s = []

    if ngt > 0:
        od_s = np.ones(2, dtype=float)
        od_s[0] = fr_od
        od_s[1] = gt_od

    # creates an array with the subchannels that correspond to a rod

    subchannels_in_rod = np.zeros((nrods, 2, 2), dtype=int)

    for i in range(0, nrods):
        top = i+1 + i//(nchn_side-1)
        subchannels_in_rod[i][0][0] = top
        subchannels_in_rod[i][0][1] = top + 1
        subchannels_in_rod[i][1][0] = top + nchn_side
        subchannels_in_rod[i][1][1] = top + nchn_side+1

    # creates a matrix to store the data of the subchannels, so they can be merged afterwards

    an = np.zeros(nchn, dtype=float)
    pw = np.zeros(nchn, dtype=float)
    xsiz = np.zeros(nchn, dtype=float)
    ysiz = np.zeros(nchn, dtype=float)
    channX = np.zeros(nchn, dtype=float)
    channY = np.zeros(nchn, dtype=float)

    # identifies corner, side (horizontal and vertical) and center subchannels

    chan_corner = np.array([1, nchn_side, nchn - nchn_side + 1, nchn], dtype=int)
    chan_sideH = np.zeros(2*(nchn_side-2), dtype=int)
    chan_sideV = np.zeros(2*(nchn_side-2), dtype=int)
    chan_center = np.zeros((nchn_side - 2)**2, dtype=int)

    for i in range(0, nchn_side-2):
        chan_sideH[i] = 2+i
        chan_sideH[nchn_side-2+i] = nchn - nchn_side + 2 + i
        chan_sideV[2*i] = nchn_side + 1 + i*nchn_side
        chan_sideV[2*i+1] = 2*nchn_side + i*nchn_side

    for i in range(0, (nchn_side-2)**2):
        chan_center[i] = nchn_side + 2 + i % (nchn_side-2) + nchn_side * (i // (nchn_side-2))

    #gives values to the subchannel data

    for i in range(0, 4):
        xsiz[chan_corner[i]-1] = free_sp
        ysiz[chan_corner[i]-1] = free_sp

    channX[chan_corner[0]-1] = -bp/2 + free_sp/2
    channY[chan_corner[0]-1] = bp/2 - free_sp/2
    channX[chan_corner[1]-1] = bp / 2 - free_sp / 2
    channY[chan_corner[1]-1] = bp / 2 - free_sp / 2
    channX[chan_corner[2]-1] = -bp / 2 + free_sp / 2
    channY[chan_corner[2]-1] = -bp / 2 + free_sp / 2
    channX[chan_corner[3]-1] = bp / 2 - free_sp / 2
    channY[chan_corner[3]-1] = -bp / 2 + free_sp / 2

    for i in range(0, nchn_side-2):
        channX[chan_sideH[i]-1] = -bp / 2 + free_sp + pp/2 + i*pp
        channY[chan_sideH[i]-1] = bp / 2 - free_sp / 2
        channX[chan_sideH[nchn_side-2+i] - 1] = -bp / 2 + free_sp + pp / 2 + i * pp
        channY[chan_sideH[nchn_side-2+i] - 1] = -bp / 2 + free_sp / 2

    def findsubchannelinchannel(sub2chan, subch):
        aux = 0
        for i in range(0, newchn):
            for j in range(0, dlev):
                for k in range(0, dlev):
                    if sub2chan[i][j][k] == subch:
                        aux = i + 1
                        break
        return aux



    print(fa_num)
    print(fa_types)
    print(fa_numcol)
    print(fa_numrow)
    print(nrods)
    print(nrods_side)
    print(nchn)
    print(nchn_side)
    print(pp)
    print(bp)
    print(fa_cent[1][1])
    print(core_map)
    print(fa_transl)
    print(fa_types)
    print(core_cent)
    print(fa_cent)
    print(rodtype)
    print(chan_corner)
    print(chan_sideH)
    print(chan_sideV)
    print(chan_center)

    if ngt > 0:
        print(gtpos)

    print(channX)
    print(channY)
    # Create the new file and write lines in it
    file = open('new_deck.inp', 'w')
    file.writelines(lines)
    file.close()

    # TODO Assess that it is compatible with different assembly types and power profiles
    # TODO correct the alignment when writing lines (e.g. in channels or gaps cards) -> deck.inp file is more readable


main()

